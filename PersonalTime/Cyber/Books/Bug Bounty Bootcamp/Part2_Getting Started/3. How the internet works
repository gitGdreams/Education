Client - Server relationship
Client requests for services and resources from Server.
Server provides services and resources to Client.

When visiting a website:
browser will be a client that request a webpage from web server.

Web page = collection of resources or files sent by the web server.
  HTML, CSS, JS, images, and videos
JavaScript can animate and validate user input on the client side before sending it to the server.
Web API enables applications to request data from other systems. Allowing data share and resources in a controlled way.

DNS server functions like a phone book, translating numbers to names or names to numbers.
So this is how it works:
Browser ---where is google.com--> DNS Server ---it's 8.8.8.8--> Browser
Then, Browser --Google please--> Web Server 8.8.8.8 --Here's the page--> Browser

Internet Ports
port is a logical division on devices that identifies the specific network service. 
  80 = http
  443 = https
  25 = SMTP
  22 = SSH
  21 = FTP
This feature allows the server to provide multiple services at the same time.
So, if the client connects to port 80, web server understeands that the client wishes to access its web services.
Browser(Client) --port 80--> WebServer <--> Port 80, Port 25, Port 21

----------------------------------------------------------------------
HTTP Requests and Responses
HTTP is a set of rules that specifies how to structure and interpret internet messages, and how web clients and web servers should exchange information.
Two most common:
GET - retrieves data from server
POST - submits data to server

Other ones:
OPTIONS - requests permitted HTTP methods for a given URL
PUT - used to update a resource
DELETE - used to delete a resource

All HTTP requests are compose of:
Request line - first line; GET / HTTP/1.1 ; specifies request method, requested URL and version of HTTP used
Request headers - used to pass additional information about the request to the server, Host:, User-Agent:, Accept:, and others
Optional request body - 

Pay attention to Referer, Cookie and Authorization

HTTP response 
This is when the server fulfill the client's request by returning the resources used to construct web page.
It contains:
An HTTP status code to indicate whether the request succeeded - 200
HTTP headers, which are bits of information that browsers and servers use to communicate with each other about authentication, content format, and security policies; 
HTTP response body, or the actual web content that you requested. 

HTTP code:
200 - successful request
300 - redirect to another page
400 - error on client's part
500 - server error

Example 403 means resource is forbidden to you.

Pay special Attention to HTTP response headers:
Set-Cookie - sent by server to client to set a cookie
Location - indicates URL to which to redirect the page
Access-Control-Allow-Origin - indicates which origins can access the page's content(Chapter 19 talks about this)
Content-Security-Policy - controls the origin of the resources the browser is allowed to load(Chapter 8)
X-Frame-Options - indicates whether the page can be loaded within an iframe(Chapter 8 talks about this)

Response body has:
HTML
JS Code

-----------------------------------------------------------------
Content Encoding - way to transfer binary data reliably across machines that have limited support for different content types.

Base64 encoding is one of the most common encoding data.



















