https://jasper-join-7e5.notion.site/IDOR-Cheat-Sheet-9f7c9e3285bf4c7cae5ea38243cd0391
https://www.youtube.com/watch?v=EQ7QdlXV6fo

# Tips

## 1. Parameters

Top IDOR parameters to look out for

```
id=
uid=
gid=
user=
account=
number=
order=
no=
doc=
file=
key=
email=
group=
profile=
edit=
report=
```

2. UUIDs

UUIDs are Universally Unique Identifiers, and you will encounter them often when hunting for IDORs. 
They are designed to be non-guessable, which might seem to shut down avenues for exploitation. 
Many bug bounty programs do not consider IDORs on UUIDs.

But don’t be deterred; here are a few tricks to test these seemingly secure IDs

1. Look for Leaks.UUIDs can sometimes be exposed in other parts of the application. 
Check **logs**, **error messages**, and the **page source**.
2. Don’t assume all UUIDs are created perfectly. Test if they are truly non-guessable. 
Sometimes, developers implement custom UUID generation methods that may not be as random as expected.
3. Try simpler modifications. Replace a complex UUID in the URL with basic numeric sequences 
or predictable patterns like `0000000-0000-0000-000000000000`.  
You’d be surprised how often the default values are overlooked in access controls.
4. Dig in the archives. Utilize tools like the Wayback Machine or Common Crawl. 
These archives might hold versions of the application where UUIDs were exposed.

3. Parameter Pollution

Consider the following enpoint: 

```
/api/messages?user_id=<USER_ID>
```

If you can’t find an IDOR on the `user_id` parameter, try to add another `user_id` .

```
/api/messages?user_id=<USER_ID>&**user_id=<OTHER_ID>**
```

Another variation involves lists. 

```
/api/messages?user_ids[]=<USER_ID>&user_ids[]=<OTHER_ID> 

```

4. Different Method

Test all HTTP methods. 

```
GET
POST
PUT
PATCH
DELETE
```

5. Hashing/Encoding

Consider this URL parameter: 

```
?filename=ZmlsZV8xMjMucGRm
```

The ‘file id’ string is base64 encoded. Decoding it, modify the filename, and then re-encode it: 

```
Initial String -> ZmlsZV8xMjMucGRm
Base64 Decode  -> file_123.pdf
Change         -> file_111.pdf
Base64 Encode  -> ZmlsZV8xMTEucGRm
```

Substituting the original encoded string with this new one in the URL could allow access to a different file.

Parameters might be encoded with a more sophisticated scheme than base64 or it might be hashed. In this case, you can try tools like [CyberChef](https://gchq.github.io/CyberChef/) or [hashes.com](https://hashes.com/en/decrypt/hash)

6. Fuzzing

Sometimes fuzzing can expose overlooked endpoints.

Consider `/api/v1/messages/view` There are two potential points to fuzz here

```
/api/$FUZZ1$/messages/view$FUZZ2$
```

7. No ID, no Problem

Not every endpoint will show an `ID` parameter. 

1. Start testing by appending potential ID parameters.
2. Replace generic terms with specific IDs. 
Often, endpoints use placeholders like `self` or `user` to refer to the current session's user.

## Bonus: IDOR + XSS

When you combine IDOR with self-XSS, you can often create a stored-XSS targeted towards a specific user.

Consider a scenario where you can create a folder via an API. 

```
/api/createFolder?user_id=123&folder_name=test
```

The impact of a self-XSS in the `folder_name` would be rather limited since you only expose yourself to it. 
However, if there is also an IDOR vulnerability in the `user_id` parameter, such that you can create folders 
for different users, you can chain these two vulnerabilities. 
In this case, you can store malicious scripts directly in the workspace of other users. 
When this user accesses his workspace, the XSS triggers. Through chaining these two 
vulnerabilities the impact got significantly increased.

